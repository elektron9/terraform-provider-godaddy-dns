---
page_title: "godaddy-dns_record Resource - terraform-provider-godaddy-dns"
subcategory: ""
description: |-
  DNS resource record
---

# godaddy-dns_record (Resource)

DNS resource record

## Example Usage

```terraform
# one record
resource "godaddy-dns_record" "one-cname" {
  domain = "mydomain.com"
  type   = "CNAME"
  name   = "redirect"
  data   = "target.otherdomain.com"
}

locals {
  records = {
    "mx1" = {
      type = "MX",
      name = "@",
      data = "mx01.mail.icloud.com",
      prio = 10,
    },
    "mx2" = {
      type = "MX",
      name = "@",
      data = "mx02.mail.icloud.com",
      prio = 10,
    },
    "spf" = {
      type = "TXT",
      name = "@",
      data = "\"v=spf1 include:icloud.com ~all\""
    },
  }
}

# with names like `godaddy-dns_record.records["mx"]`
resource "godaddy-dns_record" "records" {
  for_each = local.records
  domain   = "mydomain.com"
  type     = each.value.type
  name     = each.value.name
  data     = each.value.data
  priority = lookup(each.value, "prio", null)
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `data` (String) record value: target for CNAME, ip address for A etc
- `domain` (String) main managed domain (top-level)
- `name` (String) name (part of FQN), may include `.` for records in sub-domains
- `type` (String) type: A, CNAME etc

### Optional

- `priority` (Number) Priority for MX

### Read-Only

- `ttl` (Number) TTL, > 600 < 86400, def 3600

## Import

Import is supported using the id in format `<domain>:<type>:<name>:<data>`:

```shell
terraform import godaddy-dns_record.cname-alias mydom.com:CNAME:alias:test.com
```

### Limitations of Import

Any attribute values that are specified within Terraform config will be
ignored during import and all attributes that have defaults defined within
the schema will have the default assigned.

For instance, using the following config during import:
```terraform
resource "random_string" "test" {
  length = 16
  lower  = false
}
```

Then importing the resource using `terraform import random_string.test test`,
would result in the triggering of a replacement (i.e., destroy-create) during
the next `terraform apply`.

### Avoiding Replacement

If the resource were imported using `terraform import random_string.test test`,
replacement can be avoided by using:

1. Attribute values that match the imported ID and defaults:
    ```terraform
    resource "random_string" "test" {
      length = 4
      lower  = true
    }
    ```

2. Attribute values that match the imported ID and omit the attributes with defaults:
    ```terraform
    resource "random_string" "test" {
      length = 4
    }
    ```

3. `ignore_changes` specifying the attributes to ignore:
    ```terraform
    resource "random_string" "test" {
      length = 16
      lower  = false

      lifecycle {
        ignore_changes = [
          length,
          lower,
        ]
      }
    }
    ```

    **NOTE** `ignore_changes` is only required until the resource is recreated after import,
    after which it will use the configuration values specified.
