---
page_title: "godaddy-dns_record Resource - terraform-provider-godaddy-dns"
subcategory: ""
description: |-
  DNS resource record, representing a single RR in managed domain
---

# godaddy-dns_record (Resource)

DNS resource record, representing a single RR in managed domain

It currently supports `A`, `AAAA`, `CNAME`, `MX`, `NS` and `TXT` records. `SRV` are not supported; if anyone hosting AD on GoDaddy or uses them for VOIP or something like that, please let me know by creating an issue.

GoDaddy API does not have stable identities for DNS records, and in case of external modifications (e.g. via web console) behavior is slightly different for "single-valued" vs "mult-valued" records
- for "single-valued" record types (`A` and `CNAME`) there could be only 1 record of this type with a given name, so these are just replaced by update
- for "multi-valued" record types (`MX`, `NS`, `TXT`) there could be several records with a given name (e.g. multiple MXes with different priorities and targets), so matching is done on value; if record's value is modified outside of Terraform, it is treated as a completely new record and is preserved (and original record is considered gone), so new record is created on update.

## Example Usage

```terraform
# one record
resource "godaddy-dns_record" "one-cname" {
  domain = "mydomain.com"
  type   = "CNAME"
  name   = "redirect"
  data   = "target.otherdomain.com"
}

locals {
  records = {
    "mx1" = {
      type = "MX",
      name = "@",
      data = "mx01.mail.icloud.com",
      prio = 10,
    },
    "mx2" = {
      type = "MX",
      name = "@",
      data = "mx02.mail.icloud.com",
      prio = 10,
    },
    "spf" = {
      type = "TXT",
      name = "@",
      data = "\"v=spf1 include:icloud.com ~all\""
    },
  }
}

# with names like `godaddy-dns_record.records["mx"]`
resource "godaddy-dns_record" "records" {
  for_each = local.records
  domain   = "mydomain.com"
  type     = each.value.type
  name     = each.value.name
  data     = each.value.data
  priority = lookup(each.value, "prio", null)
}
```

To set several records, use `for_each`:

```terraform
terraform {
  required_providers {
    godaddy-dns = {
      source = "registry.terraform.io/veksh/godaddy-dns"
    }
  }
}

# keys from env
provider "godaddy-dns" {}

# struct for several records
locals {
  domain = "mydomain.com"
  records = {
    "mx" = {
      type = "MX",
      name = "_test-cli",
      data = "mx1.pseudo.com",
      prio = 10,
    },
    "txt" = {
      type = "TXT",
      name = "_test-cli",
      data = "also, txt",
    },
  }
}

# with names like `godaddy-dns_record.array-of-records["mx"]`
resource "godaddy-dns_record" "array-of-records" {
  for_each = local.records
  domain   = local.domain
  type     = each.value.type
  name     = each.value.name
  data     = each.value.data
  priority = lookup(each.value, "prio", null)
}
```

## Schema

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `data` (String) Record value returned for DNS query: target for CNAME, ip address for A etc
- `domain` (String) Name of main managed domain (top-level) for this RR
- `name` (String) Record name name (part of FQN), may include `.` for records in sub-domains or be `@` for top-level records
- `type` (String) Resource record type: A, CNAME etc

### Optional

- `priority` (Number) Record priority, required for MX (lower is higher)
- `ttl` (Number) Record time-to-live, >= 600s < 86400s, default 3600 seconds (1 hour)

## Import

Import is supported using the id in format `<domain>:<type>:<name>:<data>`:

```shell
terraform import godaddy-dns_record.cname-alias mydom.com:CNAME:alias:test.com
```
